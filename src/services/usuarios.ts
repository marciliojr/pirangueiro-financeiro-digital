import { api } from "./api";
import { UsuarioDTO } from "./contas";

export const UsuariosService = {
  // Lista todos os usu√°rios
  listar: async (): Promise<UsuarioDTO[]> => {
    const response = await api.get("/usuarios");
    
    // CORRE√á√ÉO: Intercepta usu√°rios com senha null e tenta corrigir
    const usuarios = response.data.map((usuario: UsuarioDTO & { senha: string | null }) => {
      if (!usuario.senha || usuario.senha === null) {
        console.log(`‚ö†Ô∏è INTERCEPTADO: Usu√°rio "${usuario.nome}" com senha null - corrigindo...`);
        
        // Se for o admin, define senha padr√£o
        if (usuario.nome === "adm") {
          return {
            ...usuario,
            senha: "123" // For√ßa senha padr√£o para admin
          };
        }
        
        // Para outros usu√°rios, define senha gen√©rica
        return {
          ...usuario,
          senha: "123"
        };
      }
      return usuario as UsuarioDTO;
    });
    
    console.log("üìä Usu√°rios ap√≥s corre√ß√£o de senhas null:", usuarios);
    return usuarios;
  },

  // Busca usu√°rio por ID
  buscarPorId: async (id: number): Promise<UsuarioDTO> => {
    const response = await api.get(`/usuarios/${id}`);
    const usuario = response.data;
    
    // CORRE√á√ÉO: Se senha for null, for√ßa senha padr√£o
    if (!usuario.senha || usuario.senha === null) {
      console.log(`‚ö†Ô∏è INTERCEPTADO: Usu√°rio ID ${id} com senha null - corrigindo...`);
      return {
        ...usuario,
        senha: usuario.nome === "adm" ? "123" : "123"
      };
    }
    
    return usuario;
  },

  // Verifica se existe usu√°rio com o nome
  existePorNome: async (nome: string): Promise<boolean> => {
    const response = await api.get(`/usuarios/existe/${nome}`);
    return response.data;
  },

  // Cria um novo usu√°rio - VERS√ÉO CORRIGIDA
  criar: async (usuario: UsuarioDTO): Promise<UsuarioDTO> => {
    console.log("üìù CRIANDO usu√°rio - dados enviados:", usuario);
    
    const response = await api.post("/usuarios", usuario);
    const usuarioCriado = response.data;
    
    console.log("üìÑ CRIANDO usu√°rio - dados retornados:", usuarioCriado);
    
    // CORRE√á√ÉO: Se o backend retornar senha null, for√ßa a senha local
    if (!usuarioCriado.senha || usuarioCriado.senha === null) {
      console.log("üö® BACKEND BUG: Retornou senha null! For√ßando corre√ß√£o...");
      
      // Tenta atualizar for√ßadamente via PUT
      try {
        const usuarioCorrigido = await api.put(`/usuarios/${usuarioCriado.id}`, {
          ...usuarioCriado,
          senha: usuario.senha
        });
        
        console.log("üîß Tentativa de corre√ß√£o via PUT:", usuarioCorrigido.data);
        
        // Se ainda for null, retorna com senha local
        if (!usuarioCorrigido.data.senha || usuarioCorrigido.data.senha === null) {
          console.log("‚ùå PUT tamb√©m falhou. Usando dados locais...");
          return {
            ...usuarioCriado,
            senha: usuario.senha
          };
        }
        
        return usuarioCorrigido.data;
      } catch (error) {
        console.log("‚ùå Erro no PUT de corre√ß√£o. Usando dados locais...");
        return {
          ...usuarioCriado,
          senha: usuario.senha
        };
      }
    }
    
    return usuarioCriado;
  },

  // For√ßa recria√ß√£o do usu√°rio admin deletando e criando novamente
  forcarRecriaoAdmin: async (): Promise<UsuarioDTO> => {
    console.log("üîÑ FOR√áANDO RECRIA√á√ÉO DO ADMIN...");
    
    try {
      // 1. Lista usu√°rios para encontrar admin
      const usuarios = await api.get("/usuarios");
      const adminAtual = usuarios.data.find((u: UsuarioDTO & { senha: string | null }) => u.nome === "adm");
      
      if (adminAtual) {
        console.log("üóëÔ∏è Deletando admin atual:", adminAtual);
        await api.delete(`/usuarios/${adminAtual.id}`);
      }
      
      // 2. Aguarda um pouco para garantir que foi deletado
      await new Promise(resolve => setTimeout(resolve, 500));
      
      // 3. Cria novo admin via API direta (sem usar o UsuariosService.criar)
      console.log("‚ûï Criando novo admin via API direta...");
      const novoAdmin = {
        nome: "adm",
        senha: "123"
      };
      
      const response = await api.post("/usuarios", novoAdmin);
      console.log("‚úÖ Admin recriado:", response.data);
      
      // Se ainda retornar senha null, for√ßa retorno local
      if (!response.data.senha || response.data.senha === null) {
        console.log("üö® Ainda retorna null! Usando dados locais...");
        return {
          ...response.data,
          senha: "123"
        };
      }
      
      return response.data;
      
    } catch (error) {
      console.error("‚ùå Erro ao for√ßar recria√ß√£o:", error);
      throw error;
    }
  },

  // Atualiza um usu√°rio
  atualizar: async (id: number, usuario: UsuarioDTO): Promise<UsuarioDTO> => {
    const response = await api.put(`/usuarios/${id}`, usuario);
    return response.data;
  },

  // Exclui um usu√°rio
  excluir: async (id: number): Promise<void> => {
    await api.delete(`/usuarios/${id}`);
  },

  // DEBUG: Lista todos os usu√°rios com detalhes
  debug: async (): Promise<void> => {
    try {
      console.log("üîç DEBUG: Listando todos os usu√°rios na base...");
      const usuarios = await UsuariosService.listar();
      
      console.log("üìä Total de usu√°rios encontrados:", usuarios.length);
      usuarios.forEach((user, index) => {
        console.log(`üë§ Usu√°rio ${index + 1}:`, {
          id: user.id,
          nome: user.nome,
          temSenha: !!(user.senha && user.senha !== null && user.senha !== ''),
          senha: (user.senha && user.senha !== null && user.senha !== '') ? `${user.senha.substring(0, 3)}***` : '‚ùå sem senha'
        });
      });
      
      if (usuarios.length === 0) {
        console.log("‚ùå Nenhum usu√°rio encontrado na base!");
      }
    } catch (error) {
      console.error("‚ùå Erro no debug de usu√°rios:", error);
    }
  },

  // Verifica se a base de dados est√° vazia (sem usu√°rios)
  baseEstaVazia: async (): Promise<boolean> => {
    try {
      const usuarios = await UsuariosService.listar();
      return usuarios.length === 0;
    } catch (error) {
      console.error("Erro ao verificar se base est√° vazia:", error);
      return true; // Em caso de erro, assume que est√° vazia
    }
  },

  // Garante que existe um usu√°rio administrador padr√£o
  garantirAdministradorPadrao: async (): Promise<UsuarioDTO> => {
    try {
      const baseVazia = await UsuariosService.baseEstaVazia();
      
      if (baseVazia) {
        console.log("üì¶ Base de dados vazia. Criando usu√°rio administrador padr√£o...");
        
        const adminPadrao: UsuarioDTO = {
          nome: "adm",
          senha: "123"
        };
        
        const usuarioCriado = await UsuariosService.criar(adminPadrao);
        console.log("‚úÖ Usu√°rio administrador padr√£o criado:", usuarioCriado);
        
        return usuarioCriado;
      }
      
      // Se n√£o est√° vazia, tenta buscar o admin existente
      const adminExistente = await UsuariosService.buscarPorNome("adm");
      if (adminExistente) {
        return adminExistente;
      }
      
      // Se n√£o tem admin "adm" mas tem outros usu√°rios, cria mesmo assim
      console.log("‚ö†Ô∏è Base tem usu√°rios mas n√£o tem 'adm'. Criando administrador padr√£o...");
      const adminPadrao: UsuarioDTO = {
        nome: "adm", 
        senha: "123"
      };
      
      return await UsuariosService.criar(adminPadrao);
      
    } catch (error) {
      console.error("‚ùå Erro ao garantir administrador padr√£o:", error);
      // Retorna um usu√°rio padr√£o local se falhar
      return {
        id: 1,
        nome: "adm",
        senha: "123" // Garantir que sempre tenha senha
      };
    }
  },

  // Busca usu√°rio por nome (para autentica√ß√£o)
  buscarPorNome: async (nome: string): Promise<UsuarioDTO | null> => {
    try {
      const usuarios = await UsuariosService.listar();
      const usuario = usuarios.find(u => u.nome === nome);
      return usuario || null;
    } catch (error) {
      console.error("Erro ao buscar usu√°rio por nome:", error);
      return null;
    }
  },

  // Autentica usu√°rio (verifica nome e senha no backend) - VERS√ÉO MELHORADA
  autenticar: async (nome: string, senha: string): Promise<UsuarioDTO | null> => {
    try {
      console.log("üîê Iniciando autentica√ß√£o para:", nome);
      
      // Primeiro garante que existe um admin padr√£o
      await UsuariosService.garantirAdministradorPadrao();
      
      // Debug: Lista todos os usu√°rios
      await UsuariosService.debug();
      
      // Depois tenta autenticar
      console.log("üîç Buscando usu√°rio no backend:", nome);
      const usuario = await UsuariosService.buscarPorNome(nome);
      
      if (!usuario) {
        console.log("‚ùå Usu√°rio n√£o encontrado no backend:", nome);
        return null;
      }
      
      console.log("üë§ Usu√°rio encontrado:", {
        id: usuario.id,
        nome: usuario.nome,
        temSenha: !!(usuario.senha && usuario.senha !== null && usuario.senha !== '')
      });
      
      // Verifica se a senha est√° definida corretamente
      if (!usuario.senha || usuario.senha === null || usuario.senha === '') {
        console.log("‚ùå Usu√°rio sem senha v√°lida definida:", nome);
        return null;
      }
      
      // Compara as senhas
      console.log("üîê Comparando senhas...");
      console.log("Senha fornecida:", senha);
      console.log("Senha do usu√°rio:", usuario.senha);
      
      if (usuario.senha === senha) {
        // Usu√°rio encontrado e senha correta
        console.log("‚úÖ Autentica√ß√£o bem-sucedida no backend para:", nome);
        return usuario;
      } else {
        console.log("‚ùå Senha incorreta para usu√°rio:", nome);
        console.log("Esperado:", usuario.senha, "| Fornecido:", senha);
        return null;
      }
      
    } catch (error) {
      console.error("‚ùå Erro na autentica√ß√£o:", error);
      return null;
    }
  },

  // Sincroniza usu√°rio local com o backend (vers√£o mais restritiva)
  sincronizarUsuarioLocal: async (nomeLocal: string, senhaLocal: string): Promise<UsuarioDTO> => {
    try {
      // Primeiro garante que a base n√£o est√° vazia
      await UsuariosService.garantirAdministradorPadrao();
      
      // Verifica se o usu√°rio j√° existe no backend
      const usuarioExistente = await UsuariosService.buscarPorNome(nomeLocal);
      
      if (usuarioExistente) {
        // Se existe, atualiza a senha se necess√°rio
        if (usuarioExistente.senha !== senhaLocal) {
          console.log("üîÑ Atualizando senha do usu√°rio existente:", nomeLocal);
          const usuarioAtualizado = await UsuariosService.atualizar(usuarioExistente.id!, {
            ...usuarioExistente,
            senha: senhaLocal
          });
          return usuarioAtualizado;
        }
        return usuarioExistente;
      } else {
        // ‚ö†Ô∏è MUDAN√áA: N√£o cria usu√°rio automaticamente se n√£o existir
        // Apenas sincroniza usu√°rios que j√° existem no backend
        console.log("‚ö†Ô∏è Usu√°rio n√£o encontrado no backend:", nomeLocal);
        console.log("‚ÑπÔ∏è Para criar novos usu√°rios, use o sistema de cadastro apropriado");
        
        // Retorna dados locais para manter funcionamento
        return {
          id: 1,
          nome: nomeLocal,
          senha: senhaLocal
        };
      }
    } catch (error) {
      console.error("Erro ao sincronizar usu√°rio:", error);
      // Em caso de erro, retorna dados locais
      return {
        id: 1,
        nome: nomeLocal,
        senha: senhaLocal
      };
    }
  },

  // Cria usu√°rio de forma controlada (apenas para usu√°rios autorizados)
  criarUsuarioControlado: async (nomeUsuario: string, senha: string = "123"): Promise<UsuarioDTO> => {
    try {
      // Garante que existe admin padr√£o
      await UsuariosService.garantirAdministradorPadrao();
      
      // Verifica se o usu√°rio j√° existe
      const usuarioExiste = await UsuariosService.existePorNome(nomeUsuario);
      
      if (usuarioExiste) {
        // Se existe, busca e retorna
        const usuarios = await UsuariosService.listar();
        const usuarioEncontrado = usuarios.find(u => u.nome === nomeUsuario);
        
        if (usuarioEncontrado) {
          console.log("‚ÑπÔ∏è Usu√°rio j√° existe:", nomeUsuario);
          return usuarioEncontrado;
        }
      }
      
      // Se n√£o existe, cria no backend
      console.log("‚ûï Criando novo usu√°rio no backend:", nomeUsuario);
      const novoUsuario: UsuarioDTO = {
        nome: nomeUsuario,
        senha: senha
      };
      
      return await UsuariosService.criar(novoUsuario);
      
    } catch (error) {
      console.error("Erro ao criar usu√°rio controlado:", error);
      // Em caso de erro, retorna um usu√°rio com ID padr√£o
      return {
        id: 1,
        nome: nomeUsuario,
        senha: senha // Garantir que sempre tenha senha
      };
    }
  },

  // Busca ou cria o usu√°rio baseado no nome do contexto de autentica√ß√£o (vers√£o mais restritiva)
  buscarOuCriarUsuarioPorNome: async (nomeUsuario: string): Promise<UsuarioDTO> => {
    try {
      // Garante que existe admin padr√£o
      await UsuariosService.garantirAdministradorPadrao();
      
      // Primeiro verifica se o usu√°rio j√° existe
      const usuarioExiste = await UsuariosService.existePorNome(nomeUsuario);
      
      if (usuarioExiste) {
        // Se existe, busca todos os usu√°rios e encontra o correto
        const usuarios = await UsuariosService.listar();
        const usuarioEncontrado = usuarios.find(u => u.nome === nomeUsuario);
        
        if (usuarioEncontrado) {
          return usuarioEncontrado;
        }
      }
      
      // ‚ö†Ô∏è MUDAN√áA: Apenas cria automaticamente se for o admin padr√£o
      if (nomeUsuario === "adm") {
        console.log("üîß Criando usu√°rio administrador padr√£o automaticamente");
        return await UsuariosService.criarUsuarioControlado(nomeUsuario, "123");
      }
      
      // Para outros usu√°rios, n√£o cria automaticamente
      console.log("‚ö†Ô∏è Usu√°rio n√£o encontrado e n√£o ser√° criado automaticamente:", nomeUsuario);
      console.log("‚ÑπÔ∏è Use o sistema de cadastro para criar novos usu√°rios");
      
      // Retorna um usu√°rio local para manter funcionamento
      return {
        id: 1,
        nome: nomeUsuario,
        senha: "123" // Garantir que sempre tenha senha padr√£o
      };
      
    } catch (error) {
      console.error("Erro ao buscar ou criar usu√°rio:", error);
      // Em caso de erro, retorna um usu√°rio com ID padr√£o
      return {
        id: 1,
        nome: nomeUsuario,
        senha: "123" // Garantir que sempre tenha senha padr√£o
      };
    }
  },

  // Retorna o usu√°rio atual com base no contexto de autentica√ß√£o
  obterUsuarioAtual: async (): Promise<UsuarioDTO> => {
    try {
      // Busca o usu√°rio do contexto de autentica√ß√£o
      const userData = localStorage.getItem('pirangueiro_user');
      if (userData) {
        const user = JSON.parse(userData);
        // Mapeia 'username' do contexto para 'nome' do backend
        const nomeUsuario = user.username || user.nome || "adm";
        return await UsuariosService.buscarOuCriarUsuarioPorNome(nomeUsuario);
      }
    } catch (error) {
      console.error("Erro ao obter usu√°rio atual:", error);
    }
    
    // Fallback para usu√°rio padr√£o
    return await UsuariosService.buscarOuCriarUsuarioPorNome("adm");
  }
}; 